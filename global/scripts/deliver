#!/usr/bin/env python3

import subprocess
import os
import sys
from pathlib import Path


def print_message(message):
    print(message)


def run_cmd(cmd, cwd=None):
    """Run a shell command and return stdout, stderr, and exit code."""
    result = subprocess.run(cmd, cwd=cwd, shell=True, capture_output=True, text=True)
    return result.stdout.strip(), result.stderr.strip(), result.returncode


def get_branch_name(repo_path):
    """Get the current branch name of the given Git repository path."""
    out, err, code = run_cmd("git rev-parse --abbrev-ref HEAD", cwd=repo_path)
    if code != 0:
        print_message(f"❌ Failed to get current branch: {err}")
        sys.exit(1)
    return out.strip()


def deliver_branch(repo_path, main_branch='main'):
    
    # Check for changes before asking for a commit message
    print_message("🔎 Checking for changes...")
    out, err, code = run_cmd("git status --porcelain", cwd=repo_path)
    if not out.strip():
        print_message("✅ No changes to commit. Skipping commit step.")
        return

    # Ask for a commit message
    commit_message = input("📝 Enter a commit message: ").strip()
    if not commit_message:
        print_message("❌ Commit message cannot be empty. Aborting.")
        sys.exit(1)

    # Stage all changes
    print_message("🗂️ Staging all changes...")
    out, err, code = run_cmd("git add .", cwd=repo_path)
    if code != 0:
        print_message(f"❌ Failed to stage changes. Aborting.\n       Error: {err}")
        sys.exit(1)

    # Commit the changes
    print_message("📦 Committing changes...")
    out, err, code = run_cmd(f"git commit -m \"{commit_message}\"", cwd=repo_path)
    if code != 0:
        print_message(f"❌ Failed to commit changes. Aborting.\n       Error: {err}")
        sys.exit(1)

    print_message("✅ Changes committed successfully.")

    # Step 1: Push the local branch to the remote branch
    print_message("🔄 Pushing local branch to remote branch...")
    branch_name = get_branch_name(repo_path)
    out, err, code = run_cmd(f"git push origin {branch_name}", cwd=repo_path)

    # Check if the branch is already up to date
    if "Everything up-to-date" in err or "Everything up-to-date" in out:
        print_message(f"✅ Local branch '{branch_name}' is already up-to-date.")
        return

    # Check if the push failed
    if code != 0:
        print_message(f"❌ Failed to push local branch '{branch_name}' to remote branch. Aborting.")
        print_message(f"       Error: {err}")
        sys.exit(1)

    # Print success message if push was successful
    print_message(f"✅ Local branch '{branch_name}' pushed to remote branch successfully.")


if __name__ == "__main__":
    # Detect the repo path from the current directory
    repo_path = Path.cwd()

    if not repo_path.exists():
        print_message(f"❌ The path '{repo_path}' does not exist.")
        sys.exit(1)

    deliver_branch(repo_path)
